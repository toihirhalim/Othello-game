/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package othello;

import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.Timer;
import java.util.Random;
import java.util.List;
import javax.swing.JDialog;

import metier.*;

/**
 *
 * @author Toihir
 */
public class Othello extends javax.swing.JFrame {

    Game game;
    /**
     * Creates new form Othello
     */
    public Othello() {
        initComponents();
        blackColor = new Color(48, 48, 48);
        whiteColor = Color.white;
        gameBoardPanel = new JPanel();
        gameBoardPanel.setBounds(0, 0, 360, 360);
        gameBoardPanel.setBackground(boardColor);
        jPanel5.add(gameBoardPanel);
        timer = new Timer(delay, taskPerformer);
        timer1 = new Timer(delay, taskPerformer1);
        timer.start();
        drawProfilesPictures();
        game = DataBase.getLastGame();
        if(game == null) game = new Game();
        initGame();
        printOldGames();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        whiteTimeLabel = new javax.swing.JLabel();
        whiteNameLabel = new javax.swing.JLabel();
        whitePointsLabel = new javax.swing.JLabel();
        whitePicturePanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        blackPicturePanel = new javax.swing.JPanel();
        blackTimePanel = new javax.swing.JPanel();
        blackTimeLabel = new javax.swing.JLabel();
        blackNameLabel = new javax.swing.JLabel();
        blackPointsLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel8.setBackground(new java.awt.Color(139, 137, 135));

        jScrollPane1.setBackground(new java.awt.Color(0, 102, 255));

        jPanel7.setBackground(new java.awt.Color(139, 137, 135));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel7);

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Saved Games");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(139, 137, 135));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));

        whiteTimeLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        whiteTimeLabel.setText("05 : 00");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(whiteTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(whiteTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        whiteNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        whiteNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        whiteNameLabel.setText("Player1");

        whitePointsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        whitePointsLabel.setForeground(new java.awt.Color(255, 255, 255));
        whitePointsLabel.setText("Score : 0");

        javax.swing.GroupLayout whitePicturePanelLayout = new javax.swing.GroupLayout(whitePicturePanel);
        whitePicturePanel.setLayout(whitePicturePanelLayout);
        whitePicturePanelLayout.setHorizontalGroup(
            whitePicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        whitePicturePanelLayout.setVerticalGroup(
            whitePicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(whitePicturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(whiteNameLabel)
                .addGap(52, 52, 52)
                .addComponent(whitePointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(whitePicturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(whiteNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(whitePointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))))
        );

        jPanel5.setBackground(new java.awt.Color(0, 153, 102));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout blackPicturePanelLayout = new javax.swing.GroupLayout(blackPicturePanel);
        blackPicturePanel.setLayout(blackPicturePanelLayout);
        blackPicturePanelLayout.setHorizontalGroup(
            blackPicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        blackPicturePanelLayout.setVerticalGroup(
            blackPicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        blackTimeLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        blackTimeLabel.setText("05 : 00");

        javax.swing.GroupLayout blackTimePanelLayout = new javax.swing.GroupLayout(blackTimePanel);
        blackTimePanel.setLayout(blackTimePanelLayout);
        blackTimePanelLayout.setHorizontalGroup(
            blackTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blackTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blackTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
        );
        blackTimePanelLayout.setVerticalGroup(
            blackTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(blackTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        blackNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        blackNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        blackNameLabel.setText("jLabel4");

        blackPointsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        blackPointsLabel.setForeground(new java.awt.Color(255, 255, 255));
        blackPointsLabel.setText("Score : 0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blackPicturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blackNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(blackPointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(blackTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(blackPicturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(blackTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(blackNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(blackPointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(139, 137, 135));

        jButton1.setText("New Game with Computer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("New Game 2 Player");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("show Best Move");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        game.playWithComputer = true;
        game.newGame();
        initGame();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        game.playWithComputer = false;
        game.newGame();
        initGame();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Move bestMove = game.findBestMove();
        print();
        System.out.println("the best move is : " + bestMove);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(game.gameBack()){
            if(game.playWithComputer) game.gameBack();
            print();
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        DataBase.saveGame(game);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void play(int i, int j){
        String color = game.blackPlayNow() ? "b" : "w";
        Move move = new Move(i, j, color);
        
        game.playMove(move);
        
        print();
        
        if(game.gameOver()){
            gameOver();
            return;
        }
        if(game.playWithComputer && !game.blackPlayNow()){
            timer1.start();
        }
        
    }
    
    private void playComputer(){
        if(game.playWithComputer){
            try {
                //play using AI
                game.playMove(game.findBestMove());
            }catch(Exception e){
                //play randomly
            game.playMove(game.whitePlayer.play(game.getBoard(), game.possibleMoves("w")));
            }
            print();
            
            if(game.gameOver()){
                gameOver();
            }else if(!game.blackPlayNow()){
                timer1.restart();
            }
        }
        timer1.stop();
    }
    
    private void print(){
        String [][] board= game.getBoard();
        game.setPossibleMoves();
        Move bestMove = game.getBestMove();
        Border blackline = BorderFactory.createLineBorder(Color.black);
        Move lastMove = game.getLastMove();
        gameBoardPanel.removeAll();
        gameBoardPanel.revalidate();
        gameBoardPanel.repaint();
        for(int i = 0 ; i < 8; i++){
            for(int j = 0; j < 8; j++){
                JPanel casePanel = new JPanel();
                casePanel.setBackground(null);
                casePanel.setBorder(blackline);
                casePanel.setLayout(null);
                if(board[i][j].equals("w")){
                    JPanel circle = new RoundedPanel(35, whiteColor);
                    circle.setBackground(null);
                    circle.setBounds(5, 5, 35, 35);
                    casePanel.add(circle);
                    if(lastMove != null && lastMove.i == i && lastMove.j == j){
                        circle.setLayout(null);
                        JPanel redDot = new RoundedPanel(5, Color.red);
                        redDot.setBackground(null);
                        redDot.setBorder(null);
                        redDot.setBounds(15, 15, 4, 4);
                        circle.add(redDot);
                    }
                }else if(board[i][j].equals("b")){
                    JPanel circle = new RoundedPanel(35, blackColor);
                    circle.setBackground(null);
                    circle.setBounds(5, 5, 35, 35);
                    casePanel.add(circle);
                    if(lastMove != null && lastMove.i == i && lastMove.j == j){
                       circle.setLayout(null);
                        JPanel redDot = new RoundedPanel(4, Color.red);
                        redDot.setBackground(null);
                        redDot.setBorder(null);
                        redDot.setBounds(15, 15, 4, 4);
                        circle.add(redDot);
                    }
                }else if(game.isPossibleMove(i, j)){
                    JPanel circle = new RoundedPanel(35, null);
                            
                    if(bestMove != null && bestMove.i == i && bestMove.j == j){
                        circle = new RoundedPanel(35, new Color(0, 255, 0));
                    }    
                     
                    circle.setBackground(null);
                    circle.setBounds(5, 5, 35, 35);
                    casePanel.add(circle);
                    final int x = i;
                    final int y = j;
                    if(game.blackPlayNow() || (!game.playWithComputer))
                    circle.addMouseListener(new MouseAdapter() {
                        int i = x;
                        int j = y;

                        @Override
                        public void mousePressed(MouseEvent e) {
                            
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            play(i, j);
                        }
                    });
                    
                }
                
                gameBoardPanel.add(casePanel);
            }
        }
        gameBoardPanel.setLayout(new GridLayout(8,8));
        
        blackPointsLabel.setText("Score : " +game.blackPlayer.getScore());
        whitePointsLabel.setText("Score : " +game.whitePlayer.getScore());
    }
    
    private void initGame(){
        timer.stop();
        whiteCountDown = new CountDown(maxTime,0);
        blackCountDown = new CountDown(maxTime,0);
        whiteNameLabel.setText(game.whitePlayer.getName());
        blackNameLabel.setText(game.blackPlayer.getName());
        print();
        if(game.gameOver()){
            gameOver();
        }else {
            timer.start();
            if(game.playWithComputer && !game.blackPlayNow()){
                timer1.start();
            }
        }
    }
    
    public void drawProfilesPictures(){
        whitePicturePanel.setBackground(boardColor);
        blackPicturePanel.setBackground(boardColor);
        JPanel whiteCircle = new RoundedPanel(40, whiteColor);
        whiteCircle.setBackground(null);
        whiteCircle.setBounds(5, 5, 40, 40);
        JPanel blackCircle = new RoundedPanel(40, blackColor);
        blackCircle.setBackground(null);
        blackCircle.setBounds(5, 5, 40, 40);
        whitePicturePanel.add(whiteCircle);
        blackPicturePanel.add(blackCircle);
    }
    
    private void gameOver(){
        timer.stop();
        System.out.println(game.winner());
        //new dialog
        
        JDialog d = new JDialog(this, "game status");
        JPanel p = new JPanel();
        
        JLabel l = new JLabel(game.winner());
        p.add(l);
        d.add(p);
        
        d.setSize(200, 200);
        d.setVisible(true);
    }
    
    private void printOldGames(){
        Color itemColor = new Color(105, 103, 101);
        List<GameItem> gameItems = DataBase.listAllGames();
        
        if(gameItems == null) return;
        
        jPanel7.setLayout(null);
        int i = 0;
        for(GameItem g : gameItems){
            
            JPanel oldGame = new JPanel();
            oldGame.setBounds(0, i*50+i, 233, 50);
            oldGame.setBackground(itemColor);
            oldGame.setLayout(null);
            
            JPanel whiteCirclePanel = new JPanel();
            whiteCirclePanel.setBackground(boardColor);
            whiteCirclePanel.setBounds(183, 5, 30, 30);
            whiteCirclePanel.setLayout(null);
            JPanel blackCirclePanel = new JPanel();
            blackCirclePanel.setBackground(boardColor);
            blackCirclePanel.setBounds(5, 5, 30, 30);
            blackCirclePanel.setLayout(null);
            
            JPanel whiteCircle = new RoundedPanel(24, whiteColor);
            whiteCircle.setBackground(null);
            whiteCircle.setBounds(3, 3, 24, 24);
            
            JPanel blackCircle = new RoundedPanel(24, blackColor);
            blackCircle.setBackground(null);
            blackCircle.setBounds(3, 3, 24, 24);
            
            JLabel blackPlayerName = new JLabel(g.blackPlayerName);
            JLabel whitePlayerName = new JLabel(g.whitePlayerName);
            JLabel blackPlayerScore = new JLabel("" + g.blackPlayerScore);
            JLabel whitePlayerScore = new JLabel("" + g.whitePlayerScore);
            
            blackPlayerName.setBounds(40, 0, 50, 25);
            whitePlayerName.setBounds(120, 0, 60, 25);
            blackPlayerScore.setBounds(40, 24, 50, 10);
            whitePlayerScore.setBounds(150, 24, 50, 10);
            
            whiteCirclePanel.add(whiteCircle);
            blackCirclePanel.add(blackCircle);
            
            oldGame.add(blackCirclePanel);
            oldGame.add(whiteCirclePanel);
            oldGame.add(blackPlayerName);
            oldGame.add(whitePlayerName);
            oldGame.add(blackPlayerScore);
            oldGame.add(whitePlayerScore);
            
            jPanel7.add(oldGame);
            i++;
            
            final int id = g.gameId;
            oldGame.addMouseListener(new MouseAdapter() {
                int gameId = id;

                @Override
                public void mousePressed(MouseEvent e) {

                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    getOldGame(id);
                }
            });
        }
    }
    
    private void getOldGame(int id){
        Game newGame = DataBase.getGame(id);
        
        if(newGame != null){
            game = newGame;
            initGame();
            print();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Othello.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Othello.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Othello.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Othello.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        DataBase.initialize();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Othello().setVisible(true);
            }
        });
    }
    
    int delay = 1000;
    ActionListener taskPerformer = new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            if(game.blackPlayNow()){
                if(blackCountDown.removeSec())
                blackTimeLabel.setText(blackCountDown.toString());
            }else{
                if(whiteCountDown.removeSec())
                whiteTimeLabel.setText(whiteCountDown.toString());
            }
        }
    };
    
    ActionListener taskPerformer1 = new ActionListener() {
        
        Random rd = new Random();
        int sec  = 0;
        int delay = rd.nextInt(3) + 1;
        
        public void actionPerformed(ActionEvent evt) {
            if(sec == delay){
                sec = 0;
                delay = rd.nextInt(3) + 1;
                playComputer();
            }
            sec++;
        }
    };
    
    private int maxTime = 5;
    private Color boardColor = new Color(0, 188, 140);
    private Color blackColor = new Color(48, 48, 48);
    private Color whiteColor = Color.white;
    private CountDown whiteCountDown;
    private CountDown blackCountDown;
    private Timer timer;
    private Timer timer1;
    private JPanel gameBoardPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blackNameLabel;
    private javax.swing.JPanel blackPicturePanel;
    private javax.swing.JLabel blackPointsLabel;
    private javax.swing.JLabel blackTimeLabel;
    private javax.swing.JPanel blackTimePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel whiteNameLabel;
    private javax.swing.JPanel whitePicturePanel;
    private javax.swing.JLabel whitePointsLabel;
    private javax.swing.JLabel whiteTimeLabel;
    // End of variables declaration//GEN-END:variables

    class RoundedPanel extends JPanel
    {
        private Color backgroundColor;
        private Color borderColor = new Color(136,136,136);
        private int cornerRadius = 15;
        public RoundedPanel(LayoutManager layout, int radius) {
            super(layout);
            cornerRadius = radius;
        }
        public RoundedPanel(LayoutManager layout, int radius, Color bgColor) {
            super(layout);
            cornerRadius = radius;
            backgroundColor = bgColor;
        }
        public RoundedPanel(int radius) {
            super();
            cornerRadius = radius;
            
        }
        public RoundedPanel(int radius, Color bgColor) {
            super();
            cornerRadius = radius;
            backgroundColor = bgColor;
        }
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Dimension arcs = new Dimension(cornerRadius, cornerRadius);
            int width = getWidth();
            int height = getHeight();
            Graphics2D graphics = (Graphics2D) g;
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            //Draws the rounded panel with borders.
            if (backgroundColor != null) {
                graphics.setColor(backgroundColor);
            } else {
                graphics.setColor(getBackground());
            }
            graphics.fillRoundRect(0, 0, width-1, height-1, arcs.width, arcs.height); //paint background
            graphics.setColor(getForeground());
            graphics.drawRoundRect(0, 0, width-1, height-1, arcs.width, arcs.height); //paint border
             
        }
    }
    
    class CountDown {
        public int min;
        public int sec;
        
        public CountDown(){
            
        }
        
        public CountDown(int min, int sec){
            this.min = min;
            this.sec = sec;
        }
        public boolean removeSec(){
            if(this.sec > 0){
                this.sec -= 1;
                return true;
            }else if(min > 0) {
                min--;
                this.sec += 60 - 1;
                return true;
            }
            
            if(this.min < 0) this.min = 0;
            if(this.sec < 0) this.sec = 0;
            return false;
        }
        
        public String toString(){
            String min = this.min >= 10 ? "" + this.min : "0" + this.min;
            String sec = this.sec >= 10 ? "" + this.sec : "0" + this.sec;
            return min + " : " + sec;
        }
    }
}
